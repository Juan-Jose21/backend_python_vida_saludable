from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import (
    RoleViewSet, UsuarioViewSet, AlimentacionViewSet, AguaViewSet, EsperanzaViewSet, 
    SolViewSet, AireViewSet, DormirViewSet, DespertarViewSet, EjercicioViewSet, ProyectoViewSet, UsuarioProyectoViewSet, DatosUsuarioViewSet
)
from .viewIndicator import HealthIndicatorsAPIView

router = DefaultRouter()
router.register(r'roles', RoleViewSet)
router.register(r'usuarios', UsuarioViewSet)
router.register(r'alimentaciones', AlimentacionViewSet)
router.register(r'aguas', AguaViewSet)
router.register(r'esperanzas', EsperanzaViewSet)
router.register(r'soles', SolViewSet)
router.register(r'aires', AireViewSet)
router.register(r'sleeps', DormirViewSet)
router.register(r'despertares', DespertarViewSet)
router.register(r'ejercicios', EjercicioViewSet)
router.register(r'proyectos', ProyectoViewSet)
router.register(r'usuario-proyectos', UsuarioProyectoViewSet)
router.register(r'datos-iniciales', DatosUsuarioViewSet)


# urlpatterns += router.urls
urlpatterns = router.urls


urlpatterns = [
    path('token/', CustomTokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('register/', RegisterView.as_view(), name='register'),
]

urlpatterns += router.urls





{
            'alimentacion': "Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis",
            'alimentacion_status':[92 ,87 ,65,89,100, 50],

            'agua': "Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis"
            'agua_status': [92 ,87 ,65,89,100, 30],

            'esperanza': "Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis",
            'esperanza_status': [92 ,87 ,65,89,100, 50],

            'sol': "Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis",
            'sol_status': [92 ,87 ,65,45,100, 50],

            'aire': "Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis",
            'aire_status': aire_status,

            'dormir': D"Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis",
            'dormir_status': [56 ,87 ,65,89,100, 50],

            'ejercicio': "Aqui debemos de decir que tendencias esta teniendo el paciente segun el analisis",
            'ejercicio_status': [92 ,100 ,15,89,100, 50],
        }








from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from ..models import Alimentacion, Agua, Esperanza, Sol, Aire, Dormir, Despertar, Ejercicio
from ..serializers import (AlimentacionSerializer, AguaSerializer, EsperanzaSerializer, 
                            SolSerializer, AireSerializer, DormirSerializer, DespertarSerializer, EjercicioSerializer)
from .analizadorhabitos import AnalizadorHabitosVida

class HabitosAPIView(APIView):
    def get(self, request, *args, **kwargs):
        usuario_id = self.kwargs.get('usuario_id')
        
        try:
            alimentacion = Alimentacion.objects.get(user_id=usuario_id)
            agua = Agua.objects.get(user_id=usuario_id)
            esperanza = Esperanza.objects.get(user_id=usuario_id)
            sol = Sol.objects.get(user_id=usuario_id)
            aire = Aire.objects.get(user_id=usuario_id)
            dormir = Dormir.objects.get(user_id=usuario_id)
            despertar = Despertar.objects.get(user_id=usuario_id)
            ejercicio = Ejercicio.objects.get(user_id=usuario_id)
        except (Alimentacion.DoesNotExist, Agua.DoesNotExist, Esperanza.DoesNotExist, Sol.DoesNotExist, 
                Aire.DoesNotExist, Dormir.DoesNotExist, Despertar.DoesNotExist, Ejercicio.DoesNotExist):
            return Response({"detail": "Datos del usuario no encontrados."}, status=status.HTTP_404_NOT_FOUND)
        
        # Análisis de cada hábito
        alimentacion_status = AnalizadorHabitosVida.clasificar_alimentacion(alimentacion.desayuno, alimentacion.almuerzo,alimentacion.cena, alimentacion.desayuno_saludable ,alimentacion.almuerzo_saludable ,alimentacion.cena_saludable,alimentacion.desayuno_hora ,alimentacion.almuerzo_hora, alimentacion.cena_hora)
        agua_status = AnalizadorHabitosVida.clasificar_consumo_agua(agua.cantidad)
        esperanza_status = AnalizadorHabitosVida.clasificar_esperanza(esperanza.tipo_practica)
        sol_status = AnalizadorHabitosVida.clasificar_sol(sol.tiempo)
        aire_status = AnalizadorHabitosVida.clasificar_aire(aire.tiempo)
        dormir_status = AnalizadorHabitosVida.clasificar_sueno(dormir.hora, despertar.hora)
        ejercicio_status = AnalizadorHabitosVida.clasificar_ejercicio(ejercicio.tipo, ejercicio.tiempo)
        
        return Response({
            'alimentacion': AlimentacionSerializer(alimentacion).data,
            'alimentacion_status': alimentacion_status,

            'agua': AguaSerializer(agua).data,
            'agua_status': agua_status,

            'esperanza': EsperanzaSerializer(esperanza).data,
            'esperanza_status': esperanza_status,

            'sol': SolSerializer(sol).data,
            'sol_status': sol_status,

            'aire': AireSerializer(aire).data,
            'aire_status': aire_status,

            'dormir': DormirSerializer(dormir).data,
            'dormir_status': dormir_status,

            'ejercicio': EjercicioSerializer(ejercicio).data,
            'ejercicio_status': ejercicio_status,
        })


    df = pd.DataFrame({
            'alimentacion': [data.desayuno_saludable or data.almuerzo_saludable or data.cena_saludable for data in alimentacion_data],
            'agua': [data.cantidad for data in agua_data],
            'esperanza': [data.tipo_practica for data in esperanza_data],
            'sol': [data.tiempo for data in sol_data],
            'aire': [data.tiempo for data in aire_data],
            'dormir': [data.hora for data in dormir_data],
            'ejercicio': [data.tiempo for data in ejercicio_data],
        })